// <auto-generated />
using System;
using HallManagement.Shared.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HallManagement.Migrations
{
    [DbContext(typeof(HallDbContext))]
    partial class HallDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HallManagement.Shared.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OTP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OTPExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Religion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HallManagement.Shared.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("date");

                    b.Property<string>("FeedbackDetails")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FeedbackType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("StudentId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("HallManagement.Shared.Models.Hall", b =>
                {
                    b.Property<int>("HallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HallId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("HallCapacity")
                        .HasColumnType("int");

                    b.Property<string>("HallName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HallType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<int>("TotalRooms")
                        .HasColumnType("int");

                    b.Property<DateTime>("YearInaugurated")
                        .HasColumnType("date");

                    b.HasKey("HallId");

                    b.ToTable("Halls");

                    b.HasData(
                        new
                        {
                            HallId = 1,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9538),
                            HallCapacity = 200,
                            HallName = "Rose Hall",
                            HallType = "Male",
                            IsActive = true,
                            TotalRooms = 50,
                            YearInaugurated = new DateTime(2005, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            HallId = 2,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9564),
                            HallCapacity = 150,
                            HallName = "Lily Hall",
                            HallType = "Residential",
                            IsActive = true,
                            TotalRooms = 30,
                            YearInaugurated = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            HallId = 3,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9566),
                            HallCapacity = 100,
                            HallName = "Tulip Hall",
                            HallType = "Residential",
                            IsActive = true,
                            TotalRooms = 20,
                            YearInaugurated = new DateTime(2015, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            HallId = 4,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9568),
                            HallCapacity = 180,
                            HallName = "Jasmine Hall",
                            HallType = "Residential",
                            IsActive = true,
                            TotalRooms = 40,
                            YearInaugurated = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            HallId = 5,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9571),
                            HallCapacity = 250,
                            HallName = "Orchid Hall",
                            HallType = "Residential",
                            IsActive = true,
                            TotalRooms = 60,
                            YearInaugurated = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HallManagement.Shared.Models.HallBlock", b =>
                {
                    b.Property<int>("HallBlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HallBlockId"));

                    b.Property<string>("BlockName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("HallId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.HasKey("HallBlockId");

                    b.HasIndex("HallId");

                    b.ToTable("HallBlocks");

                    b.HasData(
                        new
                        {
                            HallBlockId = 1,
                            BlockName = "Block A",
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9718),
                            HallId = 1,
                            IsActive = true
                        },
                        new
                        {
                            HallBlockId = 2,
                            BlockName = "Block B",
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9723),
                            HallId = 1,
                            IsActive = true
                        },
                        new
                        {
                            HallBlockId = 3,
                            BlockName = "Block A",
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9724),
                            HallId = 2,
                            IsActive = true
                        },
                        new
                        {
                            HallBlockId = 4,
                            BlockName = "Block B",
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9725),
                            HallId = 2,
                            IsActive = true
                        },
                        new
                        {
                            HallBlockId = 5,
                            BlockName = "Block C",
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9726),
                            HallId = 3,
                            IsActive = true
                        });
                });

            modelBuilder.Entity("HallManagement.Shared.Models.HallFloor", b =>
                {
                    b.Property<int>("HallFloorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HallFloorId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("FloorNo")
                        .HasColumnType("int");

                    b.Property<int>("HallBlockId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.HasKey("HallFloorId");

                    b.HasIndex("HallBlockId");

                    b.ToTable("HallFloors");

                    b.HasData(
                        new
                        {
                            HallFloorId = 1,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9752),
                            FloorNo = 1,
                            HallBlockId = 1,
                            IsActive = true
                        },
                        new
                        {
                            HallFloorId = 2,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9755),
                            FloorNo = 2,
                            HallBlockId = 1,
                            IsActive = true
                        },
                        new
                        {
                            HallFloorId = 3,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9756),
                            FloorNo = 1,
                            HallBlockId = 2,
                            IsActive = true
                        },
                        new
                        {
                            HallFloorId = 4,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9758),
                            FloorNo = 2,
                            HallBlockId = 2,
                            IsActive = true
                        },
                        new
                        {
                            HallFloorId = 5,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9759),
                            FloorNo = 3,
                            HallBlockId = 3,
                            IsActive = true
                        });
                });

            modelBuilder.Entity("HallManagement.Shared.Models.Notice", b =>
                {
                    b.Property<int>("NoticeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoticeId"));

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("NoticeFile")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("NoticeId");

                    b.ToTable("Notices");
                });

            modelBuilder.Entity("HallManagement.Shared.Models.PaymentHistory", b =>
                {
                    b.Property<int>("PaymentHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentHistoryId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("money");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentVia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("PaymentHistoryId");

                    b.HasIndex("StudentId");

                    b.ToTable("PaymentHistories");
                });

            modelBuilder.Entity("HallManagement.Shared.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("RequestDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("HallManagement.Shared.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("HallFloorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("RoomNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId");

                    b.HasIndex("HallFloorId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9780),
                            HallFloorId = 1,
                            IsActive = true,
                            RoomNo = "101",
                            RoomType = "Single"
                        },
                        new
                        {
                            RoomId = 2,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9784),
                            HallFloorId = 1,
                            IsActive = true,
                            RoomNo = "102",
                            RoomType = "Double"
                        },
                        new
                        {
                            RoomId = 3,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9787),
                            HallFloorId = 2,
                            IsActive = true,
                            RoomNo = "201",
                            RoomType = "Single"
                        },
                        new
                        {
                            RoomId = 4,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9788),
                            HallFloorId = 2,
                            IsActive = true,
                            RoomNo = "202",
                            RoomType = "Double"
                        },
                        new
                        {
                            RoomId = 5,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9789),
                            HallFloorId = 3,
                            IsActive = true,
                            RoomNo = "301",
                            RoomType = "Suite"
                        });
                });

            modelBuilder.Entity("HallManagement.Shared.Models.SeatWithRoom", b =>
                {
                    b.Property<int>("SeatWithRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatWithRoomId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("RoomFare")
                        .HasColumnType("money");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.HasKey("SeatWithRoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("SeatWithRooms");
                });

            modelBuilder.Entity("HallManagement.Shared.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("date");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("PermanentAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PresentAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RegistrationNumber")
                        .HasColumnType("int");

                    b.Property<int>("RollNumber")
                        .HasColumnType("int");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("StudentAltPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("StudentEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StudentPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("StudentId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9815),
                            Department = "CSE",
                            DoB = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "Female",
                            IsActive = true,
                            PermanentAddress = "Dhaka",
                            Picture = "1.jpg",
                            PresentAddress = "Dhaka",
                            RegistrationNumber = 12345,
                            RollNumber = 101,
                            Session = "2018-19",
                            StudentEmail = "alice@example.com",
                            StudentName = "Alice",
                            StudentPhone = "01710000001"
                        },
                        new
                        {
                            StudentId = 2,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9858),
                            Department = "EEE",
                            DoB = new DateTime(2000, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "Male",
                            IsActive = true,
                            PermanentAddress = "Chittagong",
                            Picture = "2.jpg",
                            PresentAddress = "Chittagong",
                            RegistrationNumber = 12346,
                            RollNumber = 102,
                            Session = "2018-19",
                            StudentEmail = "bob@example.com",
                            StudentName = "Bob",
                            StudentPhone = "01710000002"
                        },
                        new
                        {
                            StudentId = 3,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9862),
                            Department = "BBA",
                            DoB = new DateTime(2000, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "Female",
                            IsActive = true,
                            PermanentAddress = "Sylhet",
                            Picture = "3.jpg",
                            PresentAddress = "Sylhet",
                            RegistrationNumber = 12347,
                            RollNumber = 103,
                            Session = "2018-19",
                            StudentEmail = "carol@example.com",
                            StudentName = "Carol",
                            StudentPhone = "01710000003"
                        },
                        new
                        {
                            StudentId = 4,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9864),
                            Department = "MBA",
                            DoB = new DateTime(2000, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "Male",
                            IsActive = true,
                            PermanentAddress = "Khulna",
                            Picture = "4.jpg",
                            PresentAddress = "Khulna",
                            RegistrationNumber = 12348,
                            RollNumber = 104,
                            Session = "2018-19",
                            StudentEmail = "dave@example.com",
                            StudentName = "Dave",
                            StudentPhone = "01710000004"
                        },
                        new
                        {
                            StudentId = 5,
                            CreatedDate = new DateTime(2024, 12, 28, 17, 59, 17, 932, DateTimeKind.Local).AddTicks(9867),
                            Department = "Law",
                            DoB = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = "Female",
                            IsActive = true,
                            PermanentAddress = "Barisal",
                            Picture = "5.jpg",
                            PresentAddress = "Barisal",
                            RegistrationNumber = 12349,
                            RollNumber = 105,
                            Session = "2018-19",
                            StudentEmail = "eve@example.com",
                            StudentName = "Eve",
                            StudentPhone = "01710000005"
                        });
                });

            modelBuilder.Entity("HallManagement.Shared.Models.StudentRoom", b =>
                {
                    b.Property<int>("StudentRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentRoomId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FromDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<int>("SeatWithRoomId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("StudentRoomId");

                    b.HasIndex("SeatWithRoomId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentRooms");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HallManagement.Shared.Models.Feedback", b =>
                {
                    b.HasOne("HallManagement.Shared.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("HallManagement.Shared.Models.HallBlock", b =>
                {
                    b.HasOne("HallManagement.Shared.Models.Hall", "Hall")
                        .WithMany("HallBlocks")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("HallManagement.Shared.Models.HallFloor", b =>
                {
                    b.HasOne("HallManagement.Shared.Models.HallBlock", "HallBlock")
                        .WithMany("HallFloors")
                        .HasForeignKey("HallBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HallBlock");
                });

            modelBuilder.Entity("HallManagement.Shared.Models.PaymentHistory", b =>
                {
                    b.HasOne("HallManagement.Shared.Models.Student", "Student")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("HallManagement.Shared.Models.Room", b =>
                {
                    b.HasOne("HallManagement.Shared.Models.HallFloor", "HallFloor")
                        .WithMany("Rooms")
                        .HasForeignKey("HallFloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HallFloor");
                });

            modelBuilder.Entity("HallManagement.Shared.Models.SeatWithRoom", b =>
                {
                    b.HasOne("HallManagement.Shared.Models.Room", "Room")
                        .WithMany("SeatWithRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HallManagement.Shared.Models.StudentRoom", b =>
                {
                    b.HasOne("HallManagement.Shared.Models.SeatWithRoom", "SeatWithRoom")
                        .WithMany("StudentRooms")
                        .HasForeignKey("SeatWithRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HallManagement.Shared.Models.Student", "Student")
                        .WithMany("StudentRooms")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeatWithRoom");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HallManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HallManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HallManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HallManagement.Shared.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HallManagement.Shared.Models.Hall", b =>
                {
                    b.Navigation("HallBlocks");
                });

            modelBuilder.Entity("HallManagement.Shared.Models.HallBlock", b =>
                {
                    b.Navigation("HallFloors");
                });

            modelBuilder.Entity("HallManagement.Shared.Models.HallFloor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HallManagement.Shared.Models.Room", b =>
                {
                    b.Navigation("SeatWithRooms");
                });

            modelBuilder.Entity("HallManagement.Shared.Models.SeatWithRoom", b =>
                {
                    b.Navigation("StudentRooms");
                });

            modelBuilder.Entity("HallManagement.Shared.Models.Student", b =>
                {
                    b.Navigation("PaymentHistories");

                    b.Navigation("StudentRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
